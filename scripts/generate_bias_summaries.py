#!/usr/bin/env python3
"""
Bias Summaries ÏÉùÏÑ± Ïä§ÌÅ¨Î¶ΩÌä∏

Í∞Å ÌÅ¥Îü¨Ïä§ÌÑ∞(Ïù¥Ïäà)Ïùò Ìé∏Ìñ•ÏÑ±ÏùÑ Î∂ÑÏÑùÌïòÍ≥† OpenAI GPT-4o-miniÎ•º ÏÇ¨Ïö©ÌïòÏó¨ 
ÏùòÎØ∏ÏûàÎäî Ìé∏Ìñ•ÏÑ± ÏöîÏïΩÏùÑ ÏÉùÏÑ±ÌïòÏó¨ bias_summaries ÌÖåÏù¥Î∏îÏóê Ï†ÄÏû•Ìï©ÎãàÎã§.
"""

import asyncio
import os
import sys
import json
from datetime import datetime
from typing import Dict, List, Optional

# utils Î™®Îìà importÎ•º ÏúÑÌïú Í≤ΩÎ°ú Ï∂îÍ∞Ä
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.supabase_manager_unified import UnifiedSupabaseManager


class BiasSummariesGenerator:
    def __init__(self):
        self.sm = UnifiedSupabaseManager()
        self.openai_api_key = os.getenv('OPENAI_API_KEY')
        if not self.openai_api_key:
            raise ValueError("OPENAI_API_KEY ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
        
    async def generate_bias_summaries(self):
        """Î™®Îì† ÌÅ¥Îü¨Ïä§ÌÑ∞Ïóê ÎåÄÌï¥ Bias SummariesÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§."""
        print("üöÄ Bias Summaries ÏÉùÏÑ± ÏãúÏûë")
        print("=" * 60)
        
        try:
            # Í∏∞ÏÇ¨ÏôÄ ÌÅ¥Îü¨Ïä§ÌÑ∞ Ï†ïÎ≥¥ Î°úÎìú
            articles_result = self.sm.client.table('articles').select('*').execute()
            issues_result = self.sm.client.table('issues').select('*').gt('id', 1).execute()
            
            if not articles_result.data or not issues_result.data:
                print("‚ùå Í∏∞ÏÇ¨ ÎòêÎäî ÌÅ¥Îü¨Ïä§ÌÑ∞ Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                return
            
            articles = articles_result.data
            issues = issues_result.data
            
            print(f"üìä {len(articles)}Í∞ú Í∏∞ÏÇ¨, {len(issues)}Í∞ú ÌÅ¥Îü¨Ïä§ÌÑ∞ Î°úÎìú ÏôÑÎ£å\n")
            
            # Í∞Å ÌÅ¥Îü¨Ïä§ÌÑ∞Ïóê ÎåÄÌï¥ Bias Summaries ÏÉùÏÑ±
            for issue in issues:
                cluster_id = issue['id']
                print(f"üìä ÌÅ¥Îü¨Ïä§ÌÑ∞ {cluster_id} Bias Summaries ÏÉùÏÑ± Ï§ë...")
                
                # Ìï¥Îãπ ÌÅ¥Îü¨Ïä§ÌÑ∞Ïùò Í∏∞ÏÇ¨Îì§ ÏàòÏßë
                cluster_articles = [article for article in articles if article.get('issue_id') == cluster_id]
                
                if not cluster_articles:
                    print(f"‚ö†Ô∏è ÌÅ¥Îü¨Ïä§ÌÑ∞ {cluster_id}: Í∏∞ÏÇ¨Í∞Ä ÏóÜÏäµÎãàÎã§.")
                    continue
                
                # Bias Summaries ÏÉùÏÑ±
                bias_summaries = await self._generate_cluster_bias_summaries(cluster_id, cluster_articles)
                
                # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•
                self._save_bias_summaries(cluster_id, bias_summaries)
                
                print()
            
            print("‚úÖ Bias Summaries ÏÉùÏÑ± ÏôÑÎ£å!")
            print("\nüéâ Î™®Îì† Bias SummariesÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!")
            
        except Exception as e:
            print(f"‚ùå Bias Summaries ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
    
    async def _generate_cluster_bias_summaries(self, cluster_id: int, articles: List[Dict]) -> List[Dict]:
        """ÌäπÏ†ï ÌÅ¥Îü¨Ïä§ÌÑ∞Ïùò Ìé∏Ìñ•ÏÑ± ÏöîÏïΩÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§."""
        try:
            # Í∏∞ÏÇ¨ ÎÇ¥Ïö©ÏùÑ ÌïòÎÇòÏùò ÌÖçÏä§Ìä∏Î°ú Í≤∞Ìï©
            combined_content = self._combine_articles_content(articles)
            
            # OpenAI API Ìò∏Ï∂ú
            bias_summaries = await self._call_openai_api(combined_content, cluster_id)
            
            return bias_summaries
            
        except Exception as e:
            print(f"‚ùå ÌÅ¥Îü¨Ïä§ÌÑ∞ {cluster_id} Bias Summaries ÏÉùÏÑ± Ïã§Ìå®: {e}")
            return []
    
    def _combine_articles_content(self, articles: List[Dict]) -> str:
        """Í∏∞ÏÇ¨Îì§Ïùò ÎÇ¥Ïö©ÏùÑ Í≤∞Ìï©Ìï©ÎãàÎã§."""
        combined = []
        
        for article in articles:
            title = article.get('title', '')
            content = article.get('content', '')
            media = article.get('media', '')
            
            if title and content:
                combined.append(f"Ï†úÎ™©: {title}\nÎÇ¥Ïö©: {content[:500]}...\nÏñ∏Î°†ÏÇ¨: {media}\n")
        
        return "\n".join(combined)
    
    async def _call_openai_api(self, content: str, cluster_id: int) -> List[Dict]:
        """OpenAI APIÎ•º Ìò∏Ï∂úÌïòÏó¨ Ìé∏Ìñ•ÏÑ± Î∂ÑÏÑùÏùÑ ÏàòÌñâÌï©ÎãàÎã§."""
        import httpx
        
        prompt = self._create_bias_analysis_prompt(content)
        
        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://api.openai.com/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {self.openai_api_key}",
                    "Content-Type": "application/json"
                },
                json={
                    "model": "gpt-4o-mini",
                    "messages": [
                        {
                            "role": "system",
                            "content": "ÎãπÏã†ÏùÄ ÌïúÍµ≠ Ï†ïÏπò Îâ¥Ïä§Ïùò Ìé∏Ìñ•ÏÑ±ÏùÑ Î∂ÑÏÑùÌïòÎäî Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. Í∞Å Ïñ∏Î°†ÏÇ¨Ïùò Ìé∏Ìñ•ÏÑ±ÏùÑ Ï†ïÌôïÌïòÍ≤å Î∂ÑÏÑùÌïòÍ≥† ÏöîÏïΩÌï¥Ï£ºÏÑ∏Ïöî."
                        },
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ],
                    "max_tokens": 2000,
                    "temperature": 0.3
                },
                timeout=60.0
            )
            
            if response.status_code == 200:
                result = response.json()
                content_text = result['choices'][0]['message']['content']
                return self._parse_bias_response(content_text)
            else:
                print(f"‚ùå OpenAI API Ìò∏Ï∂ú Ïã§Ìå®: {response.status_code}")
                return []
    
    def _create_bias_analysis_prompt(self, content: str) -> str:
        """Ìé∏Ìñ•ÏÑ± Î∂ÑÏÑùÏùÑ ÏúÑÌïú ÌîÑÎ°¨ÌîÑÌä∏Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§."""
        prompt = f"""
Îã§Ïùå ÌïúÍµ≠ Ï†ïÏπò Îâ¥Ïä§ Í∏∞ÏÇ¨Îì§ÏùÑ Î∂ÑÏÑùÌïòÏó¨ Ìé∏Ìñ•ÏÑ±ÏùÑ ÏöîÏïΩÌï¥Ï£ºÏÑ∏Ïöî.

**Î∂ÑÏÑùÌï† Í∏∞ÏÇ¨Îì§:**
{content}

**ÏöîÍµ¨ÏÇ¨Ìï≠:**
1. **Ï¢åÌåå Ìé∏Ìñ• (Left Bias)**: ÏßÑÎ≥¥Ï†Å, ÎØºÏ£ºÎãπ ÏßÄÏßÄ, Ïù¥Ïû¨Î™Ö ÎåÄÌÜµÎ†π Í∏çÏ†ïÏ†Å Î≥¥ÎèÑ
2. **Ï§ëÎèÑ Ìé∏Ìñ• (Center Bias)**: Í∑†ÌòïÏû°Ìûå, Í∞ùÍ¥ÄÏ†Å, ÏñëÏ™Ω Î™®Îëê ÎπÑÌåêÏ†Å/Í∏çÏ†ïÏ†Å
3. **Ïö∞Ìåå Ìé∏Ìñ• (Right Bias)**: Î≥¥ÏàòÏ†Å, Íµ≠ÎØºÏùòÌûò ÏßÄÏßÄ, Ïú§ÏÑùÏó¥ ÎåÄÌÜµÎ†π Í∏çÏ†ïÏ†Å Î≥¥ÎèÑ

**Ï∂úÎ†• ÌòïÏãù (Ï†ïÌôïÌûà Ïù¥ ÌòïÏãùÏùÑ Îî∞ÎùºÏ£ºÏÑ∏Ïöî):**
Ï¢åÌåå Ìé∏Ìñ•:
[Ï¢åÌåå Ìé∏Ìñ•Ïù¥ ÎìúÎü¨ÎÇòÎäî Í∏∞ÏÇ¨Îì§Ïùò Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† ÏùòÎØ∏ÏûàÎäî ÏöîÏïΩÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî. ÏµúÏÜå 50Ïûê Ïù¥ÏÉÅÏúºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.]

Ï§ëÎèÑ Ìé∏Ìñ•:
[Ï§ëÎèÑÏ†Å ÏÑ±Ìñ•Ïùò Í∏∞ÏÇ¨Îì§Ïùò Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† ÏùòÎØ∏ÏûàÎäî ÏöîÏïΩÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî. ÏµúÏÜå 50Ïûê Ïù¥ÏÉÅÏúºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.]

Ïö∞Ìåå Ìé∏Ìñ•:
[Ïö∞Ìåå Ìé∏Ìñ•Ïù¥ ÎìúÎü¨ÎÇòÎäî Í∏∞ÏÇ¨Îì§Ïùò Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† ÏùòÎØ∏ÏûàÎäî ÏöîÏïΩÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî. ÏµúÏÜå 50Ïûê Ïù¥ÏÉÅÏúºÎ°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.]

Í∞Å Ìé∏Ìñ•ÏÑ± Ïú†ÌòïÎ≥ÑÎ°ú Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† ÏùòÎØ∏ÏûàÎäî ÏöîÏïΩÏùÑ Ï†úÍ≥µÌï¥Ï£ºÏÑ∏Ïöî. Îπà ÎÇ¥Ïö©Ïù¥ÎÇò "1." Í∞ôÏùÄ ÏùòÎØ∏ÏóÜÎäî ÌÖçÏä§Ìä∏Îäî Ï†àÎåÄ ÏÇ¨Ïö©ÌïòÏßÄ ÎßàÏÑ∏Ïöî.
"""
        return prompt
    
    def _parse_bias_response(self, response_text: str) -> List[Dict]:
        """AI ÏùëÎãµÏùÑ ÌååÏã±Ìï©ÎãàÎã§."""
        try:
            bias_summaries = []
            
            # Ï¢åÌåå Ìé∏Ìñ• Ï∂îÏ∂ú (ÎßàÌÅ¨Îã§Ïö¥ ÌòïÏãùÍ≥º ÏùºÎ∞ò ÌòïÏãù Î™®Îëê ÏßÄÏõê)
            left_patterns = ['**Ï¢åÌåå Ìé∏Ìñ•:**', 'Ï¢åÌåå Ìé∏Ìñ•:']
            left_summary = None
            for pattern in left_patterns:
                if pattern in response_text:
                    start = response_text.find(pattern) + len(pattern)
                    end = response_text.find('Ï§ëÎèÑ Ìé∏Ìñ•:', start)
                    if end == -1:
                        end = response_text.find('Ïö∞Ìåå Ìé∏Ìñ•:', start)
                    if end == -1:
                        end = len(response_text)
                    left_summary = response_text[start:end].strip()
                    break
            
            # Ï§ëÎèÑ Ìé∏Ìñ• Ï∂îÏ∂ú
            center_patterns = ['**Ï§ëÎèÑ Ìé∏Ìñ•:**', 'Ï§ëÎèÑ Ìé∏Ìñ•:']
            center_summary = None
            for pattern in center_patterns:
                if pattern in response_text:
                    start = response_text.find(pattern) + len(pattern)
                    end = response_text.find('Ïö∞Ìåå Ìé∏Ìñ•:', start)
                    if end == -1:
                        end = len(response_text)
                    center_summary = response_text[start:end].strip()
                    break
            
            # Ïö∞Ìåå Ìé∏Ìñ• Ï∂îÏ∂ú
            right_patterns = ['**Ïö∞Ìåå Ìé∏Ìñ•:**', 'Ïö∞Ìåå Ìé∏Ìñ•:']
            right_summary = None
            for pattern in right_patterns:
                if pattern in response_text:
                    start = response_text.find(pattern) + len(pattern)
                    end = len(response_text)
                    right_summary = response_text[start:end].strip()
                    break
            
            # Ïú†Ìö®Ìïú ÏöîÏïΩÎßå Ï∂îÍ∞Ä (ÏùòÎØ∏ÏóÜÎäî ÌÖçÏä§Ìä∏ Ï†úÏô∏)
            if left_summary and len(left_summary.strip()) > 10 and not left_summary.strip().startswith(('1.', '-', '.')):
                bias_summaries.append({
                    'bias': 'Left',
                    'summary': left_summary
                })
            
            if center_summary and len(center_summary.strip()) > 10 and not center_summary.strip().startswith(('1.', '-', '.')):
                bias_summaries.append({
                    'bias': 'Center',
                    'summary': center_summary
                })
            
            if right_summary and len(right_summary.strip()) > 10 and not right_summary.strip().startswith(('1.', '-', '.')):
                bias_summaries.append({
                    'bias': 'Right',
                    'summary': right_summary
                })
            
            if not bias_summaries:
                print(f"‚ö†Ô∏è Bias ÏùëÎãµ ÌååÏã± Ïã§Ìå®, Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©: {response_text[:100]}...")
                bias_summaries = [
                    {'bias': 'Left', 'summary': 'Ìé∏Ìñ•ÏÑ± Î∂ÑÏÑù Ï§ë'},
                    {'bias': 'Center', 'summary': 'Ìé∏Ìñ•ÏÑ± Î∂ÑÏÑù Ï§ë'},
                    {'bias': 'Right', 'summary': 'Ìé∏Ìñ•ÏÑ± Î∂ÑÏÑù Ï§ë'}
                ]
            
            return bias_summaries
            
        except Exception as e:
            print(f"‚ùå Bias ÏùëÎãµ ÌååÏã± Ïã§Ìå®: {e}")
            return [
                {'bias': 'Left', 'summary': 'Ìé∏Ìñ•ÏÑ± Î∂ÑÏÑù Ï§ë'},
                {'bias': 'Center', 'summary': 'Ìé∏Ìñ•ÏÑ± Î∂ÑÏÑù Ï§ë'},
                {'bias': 'Right', 'summary': 'Ìé∏Ìñ•ÏÑ± Î∂ÑÏÑù Ï§ë'}
            ]
    
    def _save_bias_summaries(self, cluster_id: int, bias_summaries: List[Dict]):
        """Bias SummariesÎ•º bias_summaries ÌÖåÏù¥Î∏îÏóê Ï†ÄÏû•Ìï©ÎãàÎã§."""
        try:
            # Í∏∞Ï°¥ bias_summaries ÏÇ≠Ï†ú (Ïù¥ÏäàÎ≥ÑÎ°ú ÏÉàÎ°ú ÏÉùÏÑ±)
            self.sm.client.table('bias_summaries').delete().eq('issue_id', cluster_id).execute()
            
            # ÏÉàÎ°úÏö¥ bias_summaries ÏÇΩÏûÖ
            summaries_to_insert = []
            
            for bias_summary in bias_summaries:
                summaries_to_insert.append({
                    'issue_id': cluster_id,
                    'bias': bias_summary['bias'],
                    'summary': bias_summary['summary']
                })
            
            # bias_summaries ÌÖåÏù¥Î∏îÏóê ÏÇΩÏûÖ
            if summaries_to_insert:
                result = self.sm.client.table('bias_summaries').insert(summaries_to_insert).execute()
                
                if result.data:
                    print(f"‚úÖ ÌÅ¥Îü¨Ïä§ÌÑ∞ {cluster_id} Bias Summaries Ï†ÄÏû• ÏôÑÎ£å")
                    print(f"   Ìé∏Ìñ•ÏÑ± Ïú†Ìòï: {len(summaries_to_insert)}Í∞ú")
                    for summary in summaries_to_insert:
                        print(f"     - {summary['bias']}: {summary['summary'][:50]}...")
                else:
                    print(f"‚ùå ÌÅ¥Îü¨Ïä§ÌÑ∞ {cluster_id} Ï†ÄÏû• Ïã§Ìå®")
            else:
                print(f"‚ö†Ô∏è ÌÅ¥Îü¨Ïä§ÌÑ∞ {cluster_id}: Ï†ÄÏû•Ìï† Ìé∏Ìñ•ÏÑ± ÏöîÏïΩÏù¥ ÏóÜÏäµÎãàÎã§")
                
        except Exception as e:
            print(f"‚ùå ÌÅ¥Îü¨Ïä§ÌÑ∞ {cluster_id} Ï†ÄÏû• Ïã§Ìå®: {e}")


async def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    try:
        generator = BiasSummariesGenerator()
        await generator.generate_bias_summaries()
    except Exception as e:
        print(f"‚ùå Î©îÏù∏ Ïã§Ìñâ Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")


if __name__ == "__main__":
    asyncio.run(main())
